import requests
import psycopg2
from ..embeddings import get_embedding

def query_chunks_with_ollama(user_question: str):
    # 1️⃣ Embed the user query
    query_embedding = get_embedding(user_question)

    # 2️⃣ Query pgvector for nearest embeddings
    conn = psycopg2.connect(
        host="localhost",
        database="postgres",
        user="postgres",
        password="postgres"
    )
    cur = conn.cursor()
    cur.execute(
    "SELECT title, filename, text, embedding <-> %s::vector AS distance FROM document_chunks ORDER BY distance ASC LIMIT 3",
    (query_embedding,)
    )
    rows = cur.fetchall()
    context_text = "\n".join(r[0] for r in rows)
    cur.close()
    conn.close()

    url = "http://localhost:11434/api/chat"
    payload = {
        "model": "llama3.2",  # Adjust as needed
        "temperature": 0.3,
        "max_tokens": 512,
        "stream": False,  # Important: disable streaming to avoid NDJSON if possible
         "messages": [
            {"role": "system", "content": "You are answering based on the provided documents."},
            {"role": "user", "content": f"Context:\n{context_text}\n\nQuestion:\n{user_question}"}
        ]  
  }
    response = requests.post(url, json=payload)
    response.raise_for_status()
    print("Query embedding:", query_embedding)
    print("Rows fetched:", rows)

    # If response is a single JSON object, try parsing directly
    try:
        result = response.json()
        return result.get("text", "").strip()
    except json.JSONDecodeError:
        # If fails, parse line by line (NDJSON)
        lines = response.text.strip().split("\n")
        texts = []
        for line in lines:
            if line.strip():
                part = json.loads(line)
                # Extract text chunks, may differ by Ollama version
                if "text" in part:
                    texts.append(part["text"])
                elif "message" in part and "content" in part["message"]:
                    texts.append(part["message"]["content"])
        return "".join(texts).strip()

